/**
 * ptAnywhere - User friendly interface to use PT Anywhere.
 * @version v2.0.1
 * @link http://pt-anywhere.kmi.open.ac.uk
 */
angular.module("ptAnywhere",["ngRoute","ui.bootstrap"]).config(["$injector","$provide",function(e,n){$log=console;var t={baseUrl:"",imagesUrl:"",apiUrl:""};for(var o in t)try{e.get(o)}catch(i){$log.log('Setting default value for non existing "baseUrl" constant: "'+t[o]+'"'),n.constant(o,t[o])}var a="locale_en";try{a=e.get("useLocale")}catch(i){$log.debug("Locales to use were not defined: using default ones.")}var l;try{l=e.get(a),n.constant("locale",l),$log.debug("Locales loaded from: "+a)}catch(i){$log.error("Locales to use could not be loaded from constant:"+a+".")}}]).config(["$httpProvider",function(e){e.interceptors.push("HttpErrorsInterceptor")}]).config(["$routeProvider","locale",function(e,n){function t(e){return'<div class="row message"><div class="col-md-8 col-md-offset-2 text-center"><h1>'+e.title+"</h1>"+("content"in e?e.content:"")+"</div></div>"}e.when("/",{template:t(n.session.creating),controller:"SessionCreatorController"}).when("/session-unavailable",{template:t(n.session.unavailable)}).when("/session-error",{template:t(n.session.genericError)}).when("/not-found",{template:t(n.session.notFound)}).when("/loading/:id",{templateUrl:"loading.html"}).when("/s/:id",{templateUrl:"main-widget.html"}).otherwise("/")}]),angular.module("ptAnywhere").controller("CommandLineController",["$scope","$uibModalInstance","locale","endpoint",function(e,n,t,o){e.title=t.commandLineDialog.title,e.endpoint=o,e.close=function(){n.dismiss("cancel")}}]),angular.module("ptAnywhere").controller("CreationController",["$log","$scope","$uibModalInstance","locale","PTAnywhereAPIService","position",function(e,n,t,o,i,a){n.submitError=null,n.locale=o,n.modal={id:"creationDialog",title:o.creationDialog.title,bodyTemplate:"creation-dialog-body.html",hasSubmit:!0},n.deviceTypes=[{value:"cloud",label:"Cloud"},{value:"router",label:"Router"},{value:"switch",label:"Switch"},{value:"pc",label:"PC"}],n.newDevice={name:"",type:n.deviceTypes[0]},n.submit=function(){var o={label:n.newDevice.name,group:n.newDevice.type.value,x:a[0],y:a[1]};n.submitError=null,i.addDevice(o).then(function(e){t.close(e)},function(t){var o=t.status===-1?"timeout":t.statusText;n.submitError="Device could not be created ("+o+").",e.error("Device creation",t)})},n.close=function(){t.dismiss("cancel")}}]),angular.module("ptAnywhere").controller("LinkController",["$log","$scope","$uibModalInstance","locale","PTAnywhereAPIService","fromDevice","toDevice",function(e,n,t,o,i,a,l){var r=this;n.fromDeviceName=a.label,n.toDeviceName=l.label,n.fromInterfaces=null,n.toInterfaces=null,n.submitError=null,n.loadError=null,n.locale=o,n.modal={id:"linkDialog",title:o.linkDialog.title,bodyTemplate:"link-dialog-body.html",hasSubmit:!1},n.selected={fromIface:null,toIface:null},r._load=function(){if(null!==a&&null!==l){var t=[i.getAvailablePorts(a),i.getAvailablePorts(l)];Promise.all(t).then(function(e){n.fromInterfaces=e[0],n.toInterfaces=e[1],n.emptyInterfaces()||(n.selected.fromIface=n.fromInterfaces[0],n.selected.toIface=n.toInterfaces[0],n.modal.hasSubmit=!0),n.$$phase||n.$apply()},function(t){n.loadError="(error code: "+t.status+")",e.error("Not loaded!",t),n.$$phase||n.$apply()})}},n.isLoadingInterfaces=function(){return null===n.fromInterfaces&&null===n.toInterfaces},n.emptyInterfaces=function(){return 0===n.fromInterfaces.length||0===n.toInterfaces.length},n.availableInterfaces=function(){return!n.isLoadingInterfaces()&&!n.emptyInterfaces()},n.submit=function(){var o=n.selected.fromIface,a=n.selected.toIface;n.submitError=null,i.createLink(o.url,a.url).then(function(e){var n={newLink:e,fromPortName:o.portName,toPortName:a.portName};t.close(n)},function(t){n.submitError="Link could not be created ("+t.statusText+").",e.error("Link creation",t)})},n.close=function(){t.dismiss("cancel")},r._load()}]),angular.module("ptAnywhere").controller("SessionCreatorController",["$location","PTAnywhereAPIService","fileToOpen",function(e,n,t){n.createSession(t,null).then(function(n){e.path("/loading/"+n)},function(n){503===n.status?e.path("/session-unavailable"):e.path("/session-error")})}]).controller("SessionLoadingController",["$location","$routeParams","PTAnywhereAPIService","NetworkMapData","baseUrl","imagesUrl","locale",function(e,n,t,o,i,a,l){var r=this;r.path=a,r.loading=l.network.loading,r.message="",t.startSession(n.id),t.getNetwork(function(e){r.message=e}).then(function(t){o.load(t),e.path("/s/"+n.id)},function(n){e.path("/not-found")})}]).controller("WidgetController",["$q","$log","$location","$routeParams","$uibModal","NetworkMapData","PTAnywhereAPIService",function(e,n,t,o,i,a,l){var r,d=this;a.isLoaded()?(d.openConsole=function(e){var n="console?endpoint="+e;r=i.open({templateUrl:"cmd-dialog.html",controller:"CommandLineController",resolve:{endpoint:function(){return n}},windowClass:"terminal-dialog"})},d.onAddDevice=function(e,n){r=i.open({templateUrl:"default-dialog.html",controller:"CreationController",resolve:{position:function(){return[e,n]}}}),r.result.then(function(e){a.addNode(e)})},d.onAddLink=function(e,n){r=i.open({templateUrl:"default-dialog.html",controller:"LinkController",resolve:{fromDevice:function(){return e},toDevice:function(){return n}}}),r.result.then(function(t){a.connect(e,n,t.newLink.id,t.newLink.url,t.fromPortName,t.toPortName)})},d.onEditDevice=function(e){r=i.open({templateUrl:"default-dialog.html",controller:"UpdateController",resolve:{device:function(){return e}}}),r.result.then(function(e){null!==e&&a.updateNode(e)})},d.onDeleteDevice=function(t){return e(function(e,o){l.removeDevice(t).then(function(){e()},function(e){n.error("Device removal.",e),o()})})},d.onDeleteLink=function(t){return e(function(e,o){l.removeLink(t).then(function(){e()},function(){n.error("Something went wrong in the link removal."),o()})})},d.onDrop=function(t){return e(function(e,o){var i=d.getNetworkCoordinates(t.x,t.y);t.x=i.x,t.y=i.y,l.addDevice(t).then(function(n){a.addNode(n),e()},function(e){n.error("Device creation",e),o()})})}):t.path("/loading/"+o.id)}]),angular.module("ptAnywhere").controller("UpdateController",["$log","$scope","$uibModalInstance","locale","PTAnywhereAPIService","device",function(e,n,t,o,i,a){var l=this;n.submitError=null,n.interfaces=null,n["interface"]={selected:null,ipAddr:null,subnet:null},n.locale=o,n.modal={id:"modification-dialog",title:o.modificationDialog.title,bodyTemplate:"update-dialog-body.html",hasSubmit:!0},n.device={name:a.label,defaultGateway:"defaultGateway"in a?a.defaultGateway:null},n.$watch("interfaces",function(e,t){null!==e&&(n["interface"].selected=e[0])}),n.$watch("interface.selected",function(e,t){e&&"portIpAddress"in e&&"portSubnetMask"in e?(n["interface"].ipAddr=e.portIpAddress,n["interface"].subnet=e.portSubnetMask):(n["interface"].ipAddr=null,n["interface"].subnet=null)}),l._load=function(){i.getAllPorts(a).then(function(e){n.interfaces=e,n.$$phase||n.$apply()},function(){n.submitError="Ports for the device "+a.id+" could not be loaded. Possible timeout."})},l._haveGlobalSettingsChanged=function(){return n.device.name!=a.label||"defaultGateway"in a&&n.device.defaultGateway!=a.defaultGateway},l._hasInterfaceChanged=function(){return null!==n["interface"].ipAddr&&null!==n["interface"].subnet&&(n["interface"].ipAddr!=n["interface"].selected.portIpAddress||n["interface"].subnet!=n["interface"].selected.portSubnetMask)},n.submit=function(){var o;o=l._haveGlobalSettingsChanged()?i.modifyDevice(a,n.device.name,n.device.defaultGateway).then(function(e){return e},function(e){return n.submitError="Global settings could not be modified.",e}):Promise.resolve(null),l._hasInterfaceChanged()&&(o=o.then(function(e){return i.modifyPort(n["interface"].selected.url,n["interface"].ipAddr,n["interface"].subnet).then(function(n){return e},function(e){return n.submitError="Interface details could not be modified.",e})})),o.then(function(e){t.close(e)},function(n){e.error("Update(s) could not be performed.",n)})},n.close=function(){t.dismiss("cancel")},l._load()}]),angular.module("ptAnywhere").directive("draggableDevice",["imagesUrl",function(e){function n(e){e.originalPosition={left:e.draggedSelector.css("left"),top:e.draggedSelector.css("top")},e.draggedSelector.draggable({helper:"clone",opacity:.4,start:function(n,t){e.draggedSelector.css({opacity:"0.7"})},stop:function(n,l){if(t(l.helper,e.dragToSelector)){var r=i(l),d=a(e.type,l.offset);e.onDrop({device:d})["finally"](function(){o(e),r.remove()})}else o(e)}})}function t(e,n){var t=n.offset().left,o=n.offset().top,i=n.outerHeight(!0),a=n.outerWidth(!0),l=o+i,r=t+a,d=e.offset().left,c=e.offset().top,s=e.outerHeight(!0),u=e.outerWidth(!0),f=c+s,g=d+u;return!(l<c||o>f||r<d||t>g)}function o(e){e.draggedSelector.animate({opacity:"1"},1e3,function(){e.draggedSelector.css({left:e.originalPosition.left,top:e.originalPosition.top})})}function i(e){var n=$('<img alt="Temporary image" src="'+e.helper.attr("src")+'">');n.css("width",e.helper.css("width"));var t=$('<div class="text-in-image"><span>Creating...</span></div>');return t.prepend(n),$("body").append(t),t.css({position:"absolute",left:e.offset.left,top:e.offset.top}),t}function a(e,n){var t=n.left,o=n.top;return{group:e,x:t,y:o}}return{restrict:"C",scope:{alt:"@",src:"@",dragTo:"@",type:"@",onDrop:"&"},template:'<img class="ui-draggable ui-draggable-handle" alt="{{ alt }}" ng-src="{{ path }}" />',link:function(t,o,i){t.path=e+"/"+t.src,t.draggedSelector=$("img",o),t.dragToSelector=$(t.dragTo),n(t)}}}]),angular.module("ptAnywhere").directive("inputIpAddress",[function(){return{restrict:"C",transclude:!0,scope:{id:"@",name:"@",formController:"=",value:"=ngModel"},templateUrl:"input-ipaddress.html",link:function(e,n,t){e.ipAddrPattern=/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/}}}]),angular.module("ptAnywhere").directive("networkMap",["locale","NetworkMapData","imagesUrl",function(e,n,t){function o(t,o,i,a){var l={nodes:n.getNodes(),edges:n.getEdges()},r={nodes:{physics:!1,font:"14px verdana black"},edges:{width:3,selectionWidth:1.4,color:{color:"#606060",highlight:"#000000",hover:"#000000"}},groups:{cloudDevice:{shape:"image",image:i+"/cloud.png",size:50},routerDevice:{shape:"image",image:i+"/router_cropped.png",size:45},switchDevice:{shape:"image",image:i+"/switch_cropped.png",size:35},pcDevice:{shape:"image",image:i+"/pc_cropped.png",size:45}},manipulation:p(t,a),locale:"ptAnywhere",locales:{ptAnywhere:e.manipulationMenu}};return new vis.Network(o,l,r)}function i(){var e=m.getSelection();return 1!==e.nodes.length?(console.log("Only one device is supposed to be selected. Instead "+e.nodes.length+" are selected."),null):n.getNode(e.nodes[0])}function a(e){return 0===e.nodes.length&&1===e.edges.length}function l(e){return e.nodes.length>0}function r(e){return e.label.indexOf("\n")!==-1}function d(e){var t=n.getNode(e.from),o=n.getNode(e.to);r(t)||(t.label=t.label+"\n("+e.fromLabel+")",n.updateNode(t)),r(o)||(o.label=o.label+"\n("+e.toLabel+")",n.updateNode(o))}function c(e){var t=n.getNode(e.from),o=n.getNode(e.to);r(t)&&(t.label=t.label.split("\n")[0],n.updateNode(t)),r(o)&&(o.label=o.label.split("\n")[0],n.updateNode(o))}function s(e){for(var t=0;t<e.edges.length;t++)c(n.getEdge(e.edges[t]))}function u(e,n){return m.DOMtoCanvas({x:e,y:n})}function f(e){$("div.vis-manipulation").append('<div class="statusMsg vis-button vis-none"><div class="vis-label text-warning">'+e+"</p></div>"),$("div.statusMsg").fadeIn("slow")}function g(e){$("div.vis-manipulation").append('<div class="statusMsg vis-button vis-none"><div class="vis-label text-danger">'+e+"</p></div>"),$("div.statusMsg").fadeIn("slow").delay(2e3).fadeOut("slow")}function p(e,t){var o=function(e,n){},i=o,a=o,l=o,r=o,d=o;return"onAddDevice"in e&&(i=function(n,t){e.onAddDevice({x:n.x,y:n.y})}),"onAddLink"in e&&(a=function(t,o){var i=n.getNode(t.from),a=n.getNode(t.to);e.onAddLink({fromDevice:i,toDevice:a})}),"onEditDevice"in e&&(l=function(t,o){e.onEditDevice({device:n.getNode(t.id)}),o(t)}),"onDeleteDevice"in e&&(r=function(o,i){f(t.deleteDevice.status),e.onDeleteDevice({device:n.getNode(o.nodes[0])}).then(function(){i(o)},function(){i([]),g(t.deleteDevice.error)})}),"onDeleteLink"in e&&(d=function(o,i){f(t.deleteLink.status);var a=n.getEdge(o.edges[0]);c(a),e.onDeleteLink({link:a}).then(function(){i(o)},function(){i([]),g(t.deleteLink.error)})}),{initiallyActive:!0,addNode:i,addEdge:a,editNode:l,editEdge:!1,deleteNode:r,deleteEdge:d}}var m;return{restrict:"C",scope:{onDoubleClick:"&",onAddDevice:"&",onAddLink:"&",onEditDevice:"&",onDeleteDevice:"&",onDeleteLink:"&",adaptCoordinates:"="},template:'<div class="map"></div>',link:function(r,c,f){var g=c.find("div")[0];m=o(r,g,t,e),r.$on("$destroy",function(){m.destroy()}),r.adaptCoordinates=u,m.on("select",function(e){if(a(e)){var t=n.getEdge(e.edges[0]);d(t)}else l(e)&&s(e)}),m.on("deselectEdge",function(e){a(e.previousSelection)&&s(e.previousSelection)}),"onDoubleClick"in r&&m.on("doubleClick",function(){var e=i();null!==e&&r.onDoubleClick({endpoint:e.consoleEndpoint})})}}}]),angular.module("ptAnywhere").constant("locale_en",{loading:"Loading...",loadingInfo:"Loading info...",name:"Name",manipulationMenu:{edit:"Edit",del:"Delete selected",back:"Back",addNode:"Add Device",addEdge:"Connect Devices",editNode:"Edit Device",addDescription:"Click in an empty space to place a new device.",edgeDescription:"Click on a node and drag the edge to another element to connect them.",editEdge:"Edit Edge",editEdgeDescription:"Click on the control points and drag them to a node to connect to it.",createEdgeError:"Cannot link edges to a cluster.",deleteClusterError:"Clusters cannot be deleted.",editClusterError:"Clusters cannot be edited."},session:{creating:{title:"Creating new session..."},notFound:{title:"Topology not found",content:'<p>The topology could not be loaded probably because the session does not exist (e.g., if it has expired).</p><p><a href="#/">Click here</a> to initiate a new one.</p>'},unavailable:{title:"Unavailable PT instances",content:'<p>Sorry, there are <b>no Packet Tracer instances available</b> right now to initiate a session.</p><p>Please, wait a little bit and <a href="#/">try again</a>.</p>'},genericError:{title:"Error creating PT instance",content:'<p>Sorry, there was an error initiating the session.</p><p>Please, wait a little bit and <a href="#/">try again</a>.</p>'}},network:{loading:"Loading network...",attempt:"Attempt",errorUnavailable:"Instance not yet available",errorTimeout:"Timeout",errorUnknown:"Unknown error",notLoaded:{title:"Topology not found",content:'<p>The topology could not be loaded probably because the session does not exist (e.g., if it has expired).</p><p><a href="?session">Click here</a> to initiate a new one.</p>'}},deleteDevice:{status:"Deleting device...",error:"The device could not be deleted."},deleteLink:{status:"Deleting link...",error:"The link could not be deleted."},creationMenu:{legend:"To create a new device, drag it to the network map"},creationDialog:{title:"Create new device",type:"Device type"},linkDialog:{title:"Connect two devices",select:"Please select which ports to connect...",error:{loading:"Problem loading the interfaces for this device. Please, try it again.",unavailability:"One of the devices you are trying to link has no available interfaces.",creation:"Sorry, something went wrong during the link creation."}},modificationDialog:{title:"Modify device",globalSettings:"Global Settings",interfaces:"Interfaces",defaultGW:"Default gateway",ipAddress:"IP address",subnetMask:"Subnet mask",noSettings:"No settings can be specified for this type of interface."},commandLineDialog:{title:"Command line"}}),angular.module("ptAnywhere").factory("PTAnywhereAPIService",["$http","apiUrl","HttpRetry",function(e,n,t){var o="",i={timeout:2e3};return{createSession:function(t,a){var l={fileUrl:t};return null!==a&&(l.sameUserAsInSession=a),e.post(n+"/sessions",l,i).then(function(e){o=e.data;var n=e.data.split("/"),t=n[n.length-1];return t})},startSession:function(e){o=n+"/sessions/"+e},getNetwork:function(n){var a=function(e){return e.data};return t.setSuccess(a),t.setExplainer(n),e.get(o+"/network",i).then(a,t.responseError)},addDevice:function(n){return e.post(o+"/devices",n,i).then(function(e){return e.data})},removeDevice:function(n){return e["delete"](n.url,i)},modifyDevice:function(n,t,o){var a={label:t};return""!==o&&(a.defaultGateway=o),e.put(n.url,a,i).then(function(e){var n=e.data;return n.defaultGateway=o,n})},modifyPort:function(n,t,o){var a={portIpAddress:t,portSubnetMask:o};return e.put(n,a,i).then(function(e){return e.data})},getAllPorts:function(n){return e.get(n.url+"ports",i).then(function(e){return e.data})},getAvailablePorts:function(n){return e.get(n.url+"ports?free=true",i).then(function(e){return e.data})},createLink:function(n,t){var o={toPort:t};return e.post(n+"link",o,i).then(function(e){return e.data})},removeLink:function(n){return e.get(n.url,i).then(function(n){return e["delete"](n.data.endpoints[0]+"link")})}}}]).factory("HttpRetry",["$http","$q","$timeout","$location","locale",function(e,n,t,o,i){function a(n,o){return t(function(){return e(n).then(s,r)},o)}function l(e){var n;switch(e){case 503:n=i.network.errorUnavailable;break;case 0:n=i.network.errorTimeout;break;default:n=i.network.errorUnknown}return n+". "+i.network.attempt+" "+d+"/"+c+"."}function r(e){if((0===e.status||503===e.status)&&d<c){var t=0===e.status?0:2e3;return d++,u(l(e.status)),a(e.config,t)}return n.reject(e)}var d=0,c=5,s=null,u=null;return{responseError:r,setSuccess:function(e){s=e},setExplainer:function(e){u=e}}}]).factory("HttpErrorsInterceptor",["$q","$location",function(e,n){return{responseError:function(t){return 410!==t.status?e.reject(t):void n.path("/not-found")}}}]),angular.module("ptAnywhere").factory("NetworkMapData",[function(){var e=!1,n=new vis.DataSet,t=new vis.DataSet;return{load:function(o){e=!0,null!==o.devices&&(n.clear(),n.add(o.devices)),null!==o.edges&&(t.clear(),t.add(o.edges))},isLoaded:function(){return e},getNode:function(e){return n.get(e)},updateNode:function(e){n.update(e)},addNode:function(e){return n.add(e)},getNodes:function(){return n},getEdge:function(e){return t.get(e)},getEdges:function(){return t},connect:function(e,n,o,i,a,l){var r;r="string"==typeof e&&"string"==typeof n?{from:getByName(e).id,to:getByName(n).id}:{from:e.id,to:n.id},void 0!==o&&(r.id=o),void 0!==i&&(r.url=i),void 0!==a&&(r.fromLabel=a),void 0!==l&&(r.toLabel=l),t.add(r)}}}]),angular.module("ptAnywhere").run(["$templateCache",function(e){e.put("cmd-dialog.html",'<div class="modal-header" style="height: 10%;">\n    <button type="button" class="close" ng-click="close()"><span aria-hidden="true">&times;</span></button>\n    <h4 class="modal-title" id="cmdModal">\n        <span class="glyphicon glyphicon-console" style="margin-right:10px" aria-hidden="true"></span>\n        {{ title }}\n    </h4>\n</div>\n<div class="modal-body" style="height: 89%;">\n    <div class="iframeWrapper">\n        <iframe class="terminal" src="{{ endpoint }}"></iframe>\n    </div>\n</div>'),e.put("creation-dialog-body.html",'<fieldset>\n    <div class="clearfix form-group">\n        <label for="{{ modal.id }}Name" class="control-label">{{ locale.name }}</label>\n        <input type="text" id="{{ modal.id }}Name" class="form-control input-lg" ng-model="newDevice.name" />\n    </div>\n    <div class="clearfix form-group">\n        <label for="{{ modal.id }}Type" class="control-label">{{ locale.creationDialog.type }}</label>\n        <p ng-if="deviceTypes === null">{{ locale.loading }}</p>\n        <div ng-if="deviceTypes !== null">\n            <select id="{{ modal.id }}Type" class="form-control input-lg"\n                    ng-model="newDevice.type" ng-options="type.label for type in deviceTypes">\n            </select>\n        </div>\n    </div>\n</fieldset>'),e.put("default-dialog.html",'<form name="dialogForm">\n    <div class="modal-header">\n        <button type="button" class="close" ng-click="close()"><span aria-hidden="true">&times;</span></button>\n        <h4 class="modal-title" id="{{ modal.id }}Label">{{ modal.title }}</h4>\n    </div>\n    <div class="modal-body">\n        <div ng-include="modal.bodyTemplate"></div>\n        <p ng-if="submitError !== null" class="clearfix bg-danger">{{ submitError }}</p>\n    </div>\n    <div class="modal-footer">\n        <button ng-click="close()" type="button" class="btn btn-default btn-lg" data-dismiss="modal">Close</button>\n        <button ng-show="modal.hasSubmit" ng-disabled="dialogForm.$invalid" ng-click="submit()" type="button" class="btn btn-primary btn-lg">Submit</button>\n    </div>\n</form>'),e.put("input-ipaddress.html",'<div class="clearfix form-group has-feedback" ng-class="{\'has-error\': formController.$invalid}">\n    <label for="{{ id }}" class="control-label"><span ng-transclude></span></label>\n    <input type="text" ng-pattern="ipAddrPattern" ng-model="value"\n           name="{{ name }}" id="{{ id }}" class="form-control input-lg" aria-describedby="{{ id }}-error" >\n    <span class="glyphicon glyphicon-remove form-control-feedback" aria-hidden="true" ng-show="formController.$invalid"></span>\n    <span id="{{ id }}-error" class="sr-only">(error)</span>\n</div>'),e.put("link-dialog-body.html",'<div ng-show="isLoadingInterfaces() && loadError === null">{{ locale.loadingInfo }}</div>\n<div ng-show="!isLoadingInterfaces()">\n    <div ng-show="availableInterfaces()">\n        <p>{{ locale.linkDialog.select }}</p>\n        <div class="clearfix form-group">\n            <label for="{{modal.id}}FromIface" class="col-md-3 fromDeviceName">{{ fromDeviceName }}</label>\n            <div class="col-md-9" ng-if="fromInterfaces !== null">\n                <select id="{{modal.id}}FromIface" class="form-control input-lg" size="1"\n                        ng-model="selected.fromIface" ng-options="iface.portName for iface in fromInterfaces">\n                </select>\n            </div>\n        </div>\n        <div class="clearfix form-group">\n            <label for="{{modal.id}}ToIface" class="col-md-3 toDeviceName">{{ toDeviceName }}</label>\n            <div class="col-md-9" ng-if="toInterfaces !== null">\n                <select id="{{modal.id}}ToIface" class="form-control input-lg" size="1"\n                        ng-model="selected.toIface" ng-options="iface.portName for iface in toInterfaces">\n                </select>\n            </div>\n        </div>\n    </div>\n    <div ng-show="!availableInterfaces()">\n        <p>{{ locale.linkDialog.error.unavailability }}</p>\n    </div>\n</div>\n<div ng-show="loadError !== null">\n    <p>{{ locale.linkDialog.error.loading }}</p>\n    <p>{{ loadError }}</p>\n</div>'),e.put("loading.html",'<div class="loading" ng-controller="SessionLoadingController as loading">\n    <img class="loading-icon" ng-src="{{ loading.path }}/loading.gif" alt="Loading network topology..." />\n    <p>{{ loading.loading }}</p>\n    <p>{{ loading.message }}</p>\n</div>'),e.put("main-widget.html",'<div ng-controller="WidgetController as widget">\n    <div class="network networkMap"\n         on-double-click="widget.openConsole(endpoint)"\n         on-add-device="widget.onAddDevice(x, y)"\n         on-add-link="widget.onAddLink(fromDevice, toDevice)"\n         on-edit-device="widget.onEditDevice(device)"\n         on-delete-device="widget.onDeleteDevice(device)"\n         on-delete-link="widget.onDeleteLink(link)"\n         adapt-coordinates="widget.getNetworkCoordinates"\n    ></div>\n    <div class="creation-menu">\n        <fieldset>\n            <div class="col-md-8 col-md-offset-2 col-sm-10 col-sm-offset-1 col-xs-12">\n                <div class="row">\n                    <figure class="col-md-3 col-sm-3 col-xs-3 text-center">\n                        <div class="draggableDevice" alt="cloud" src="cloud.png"\n                             drag-to=".map" type="cloud" on-drop="widget.onDrop(device)"></div>\n                        <figcaption>Cloud</figcaption>\n                    </figure>\n                    <figure class="col-md-3 col-sm-3 col-xs-3 text-center">\n                        <div class="draggableDevice" alt="router" src="router.png"\n                             drag-to=".map" type="router" on-drop="widget.onDrop(device)"></div>\n                        <figcaption>Router</figcaption>\n                    </figure>\n                    <figure class="col-md-3 col-sm-3 col-xs-3 text-center">\n                        <div class="draggableDevice" alt="switch" src="switch.png"\n                             drag-to=".map" type="switch" on-drop="widget.onDrop(device)"></div>\n                        <figcaption>Switch</figcaption>\n                    </figure>\n                    <figure class="col-md-3 col-sm-3 col-xs-3 text-center">\n                        <div class="draggableDevice" alt="pc" src="pc.png"\n                             drag-to=".map" type="pc" on-drop="widget.onDrop(device)"></div>\n                        <figcaption>Pc</figcaption>\n                    </figure>\n                </div>\n            </div>\n        </fieldset>\n    </div>\n</div>'),e.put("update-dialog-body.html",'<uib-tabset justified="true">\n    <uib-tab>\n        <uib-tab-heading>{{ locale.modificationDialog.globalSettings }}</uib-tab-heading>\n        <div class="clearfix form-group">\n            <label for="{{ modal.id }}-name">{{ locale.name }}</label>\n            <input type="text" ng-model="device.name" id="{{ modal.id }}-name" class="form-control input-lg" />\n        </div>\n        <div class="inputIpAddress" ng-show="device.defaultGateway !== null"\n             id="{{ modal.id }}-default-gw" name="defaultgw"\n             ng-model="device.defaultGateway" form-controller="dialogForm.defaultgw">\n            {{ locale.modificationDialog.defaultGW }}\n        </div>\n    </uib-tab>\n    <uib-tab>\n        <uib-tab-heading>{{ locale.modificationDialog.interfaces }}</uib-tab-heading>\n        <div ng-show="interfaces === null">{{ locale.loadingInfo }}</div>\n        <div ng-show="interfaces !== null">\n            <div class="clearfix form-group">\n                <label for="{{ modal.id }}-ifaces" class="control-label">{{ locale.name }}</label>\n                <select id="{{ modal.id }}-ifaces" class="form-control input-lg" size="1"\n                        ng-model="interface.selected" ng-options="iface.portName for iface in interfaces">\n                </select>\n            </div>\n            <hr />\n            <div class="clearfix form-group" ng-show="interface.ipAddr !== null">\n                <div class="inputIpAddress" id="{{ modal.id }}-ipaddr" name="ipaddr"\n                     ng-model="interface.ipAddr" form-controller="dialogForm.ipaddr">\n                    {{ locale.modificationDialog.ipAddress }}\n                </div>\n                <div class="inputIpAddress" id="{{ modal.id }}-subnet" name="subnet"\n                     ng-model="interface.subnet" form-controller="dialogForm.subnet">\n                    {{ locale.modificationDialog.subnetMask }}\n                </div>\n            </div>\n            <div class="clearfix form-group" ng-show="interface.ipAddr === null">\n                <p class="col-md-12">{{ locale.modificationDialog.noSettings }}</p>\n            </div>\n        </div>\n    </uib-tab>\n</uib-tabset>\n')}]);